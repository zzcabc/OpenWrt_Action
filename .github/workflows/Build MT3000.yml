#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build MT3000

on:
  repository_dispatch:
  schedule:
    - cron: "0 16 * * *"
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/gl-inet/gl-infra-builder.git
  CONFIG_FILE: config/gl-inet/.config
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install squashfs-tools $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          docker image prune -a -f

      - name: Generate Variables
        id: env
        run: |
          export CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
          echo "CURRENT_BRANCH=$(echo $CURRENT_BRANCH)" >> $GITHUB_OUTPUT
          cd $OPENWRT_ROOT_PATH
          export SOURCE_OWNER="$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')"
          echo "SOURCE_OWNER=$SOURCE_OWNER" >> $GITHUB_ENV
          echo "SOURCE_OWNER=$(echo $SOURCE_OWNER)" >> $GITHUB_OUTPUT

          export SOURCE_REPO="$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          echo "SOURCE_REPO=$(echo $SOURCE_REPO)" >> $GITHUB_OUTPUT

          export DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$(echo $DEVICE_TARGET)" >> $GITHUB_OUTPUT

          export DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$(echo $DEVICE_SUBTARGET)" >> $GITHUB_OUTPUT

          export DEVICE_PLATFORM=$(cat .config | grep CONFIG_TARGET_ARCH_PACKAGES | awk -F '"' '{print $2}')
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_ENV
          echo "DEVICE_PLATFORM=$(echo $DEVICE_PLATFORM)" >> $GITHUB_OUTPUT

          export TOOLCHAIN_IMAGE="toolchain-$SOURCE_OWNER-$SOURCE_REPO-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "TOOLCHAIN_IMAGE=$TOOLCHAIN_IMAGE" >> $GITHUB_ENV
          echo "TOOLCHAIN_IMAGE=$(echo $TOOLCHAIN_IMAGE)" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@main

      - name: Clone source code
        run: |
          df -hT $PWD
          git config --global user.email "zhaocheng990105@gmail.com"
          git config --global user.name "zhaocheng"
          git clone $REPO_URL gl-infra-builder
          cd gl-infra-builder
          git checkout v4.2.0_mt3000_release1
          python3 setup.py -c configs/config-mt798x-7.6.6.1.yml
          cd mt7981
          echo "OPENWRT_ROOT_PATH=$PWD" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=$(echo $PWD)" >> $GITHUB_OUTPUT

      - name: Install feeds
        run: |
          cd $OPENWRT_ROOT_PATH 
          sed -i '$a src-git NueXini_Packages https://github.com/NueXini/NueXini_Packages.git' feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files $OPENWRT_ROOT_PATH/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          cd $OPENWRT_ROOT_PATH
          make defconfig

      - name: Download DL Package
        id: download
        run: |
          cd $OPENWRT_ROOT_PATH
          make download -j64


      - name: Compile the firmware
        id: compile
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Compress Bin Folder
        run: |
          cd $OPENWRT_ROOT_PATH
          zip -r $DEVICE_TARGET-$DEVICE_SUBTARGET.zip bin

      - name: Upload Bin Archive
        uses: actions/upload-artifact@main
        with:
          name: bin-archive
          path: ${{ env.OPENWRT_ROOT_PATH }}/${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}.zip

      - name: Download Bin Archive
        uses: actions/download-artifact@v3
        with:
          name: bin-archive
          path: ${{ env.OPENWRT_ROOT_PATH }}

      - name: Decompress Bin Archive
        run: |
          cd $OPENWRT_ROOT_PATH
          unzip $DEVICE_TARGET-$DEVICE_SUBTARGET.zip

      - name: Organize Files
        run: |
          export BUILD_DATE=$(date +"%Y-%m-%d")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          cd $OPENWRT_ROOT_PATH/bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          rm -rf packages
          df -hT $PWD
      
      - name: Delete Old Firmware Assets
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-2102
          fail-if-no-assets: false
          fail-if-no-release: false
          assets: "*"

      - name: Deploy Files To Release
        uses: ncipollo/release-action@main
        if: env.FIRMWARE_RELEASE_UPLOAD == 'true'
        with:
          name: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-2102
          allowUpdates: true
          replacesArtifacts: true
          tag: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-2102
          body: ${{ env.BUILD_DATE }}
          commit: ${{ env.CURRENT_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*